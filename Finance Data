{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1FRjA5W8Tz3DKKCMUJQ6H7Fb_DBB1LeSK",
      "authorship_tag": "ABX9TyMtBn22Dwi+sGLGBY0i40pB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/omkar123katare/Finance-Data-Analysis/blob/main/Finance%20Data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "import all necessary libraries"
      ],
      "metadata": {
        "id": "DGpxABgR6Kdw"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "XfEVCc0u4buZ"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "mounting tha drive"
      ],
      "metadata": {
        "id": "cPxJippi6bln"
      }
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "z_s2YopE6bNH"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### as data is in the form of excel, use read_excel command"
      ],
      "metadata": {
        "id": "n20G46X66VHg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_excel('/content/drive/MyDrive/Copy of Bank_Personal_Loan_Modelling.xlsx',1)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 205
        },
        "id": "9ZTailp36Row",
        "outputId": "b1f2fe9f-f688-4486-f5de-818bbc3c4d25"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-e38ec073-3c43-4272-9677-edd5c9048141\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Age</th>\n",
              "      <th>Experience</th>\n",
              "      <th>Income</th>\n",
              "      <th>ZIP Code</th>\n",
              "      <th>Family</th>\n",
              "      <th>CCAvg</th>\n",
              "      <th>Education</th>\n",
              "      <th>Mortgage</th>\n",
              "      <th>Personal Loan</th>\n",
              "      <th>Securities Account</th>\n",
              "      <th>CD Account</th>\n",
              "      <th>Online</th>\n",
              "      <th>CreditCard</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>25</td>\n",
              "      <td>1</td>\n",
              "      <td>49</td>\n",
              "      <td>91107</td>\n",
              "      <td>4</td>\n",
              "      <td>1.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>45</td>\n",
              "      <td>19</td>\n",
              "      <td>34</td>\n",
              "      <td>90089</td>\n",
              "      <td>3</td>\n",
              "      <td>1.5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>39</td>\n",
              "      <td>15</td>\n",
              "      <td>11</td>\n",
              "      <td>94720</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>35</td>\n",
              "      <td>9</td>\n",
              "      <td>100</td>\n",
              "      <td>94112</td>\n",
              "      <td>1</td>\n",
              "      <td>2.7</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>35</td>\n",
              "      <td>8</td>\n",
              "      <td>45</td>\n",
              "      <td>91330</td>\n",
              "      <td>4</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e38ec073-3c43-4272-9677-edd5c9048141')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e38ec073-3c43-4272-9677-edd5c9048141 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e38ec073-3c43-4272-9677-edd5c9048141');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   ID  Age  Experience  ...  CD Account  Online  CreditCard\n",
              "0   1   25           1  ...           0       0           0\n",
              "1   2   45          19  ...           0       0           0\n",
              "2   3   39          15  ...           0       0           0\n",
              "3   4   35           9  ...           0       0           0\n",
              "4   5   35           8  ...           0       0           1\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Perform Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "IXvgUAHg9QUb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6iSx-H6m6vcK",
        "outputId": "da91f09e-b1e6-472d-aada-59cba7198282"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5000, 14)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ID and Zipcode might be removed as they may not be useful for our analysis\n",
        "\n",
        "df.drop(['ID','ZIP Code'],axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "v-qO9s2e9Sr9"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bLku3sdl9XTV",
        "outputId": "af9a1810-ff8e-4695-94db-ee5795f36fb7"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Age', 'Experience', 'Income', 'Family', 'CCAvg', 'Education',\n",
              "       'Mortgage', 'Personal Loan', 'Securities Account', 'CD Account',\n",
              "       'Online', 'CreditCard'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(data = df[['Age', 'Experience', 'Income', 'Family', 'Education']])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "vRPG3ZQZAzjW",
        "outputId": "3869a662-61e4-4759-9408-6642a2503ec3"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2cb8e58690>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "fHEvFzrs9tKy",
        "outputId": "29667049-fcbd-4f8e-a33c-a8075cce1277"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-6cdd5754-9fe3-4181-b4a6-36852212593d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Experience</th>\n",
              "      <th>Income</th>\n",
              "      <th>Family</th>\n",
              "      <th>CCAvg</th>\n",
              "      <th>Education</th>\n",
              "      <th>Mortgage</th>\n",
              "      <th>Personal Loan</th>\n",
              "      <th>Securities Account</th>\n",
              "      <th>CD Account</th>\n",
              "      <th>Online</th>\n",
              "      <th>CreditCard</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.00000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>45.338400</td>\n",
              "      <td>20.104600</td>\n",
              "      <td>73.774200</td>\n",
              "      <td>2.396400</td>\n",
              "      <td>1.937913</td>\n",
              "      <td>1.881000</td>\n",
              "      <td>56.498800</td>\n",
              "      <td>0.096000</td>\n",
              "      <td>0.104400</td>\n",
              "      <td>0.06040</td>\n",
              "      <td>0.596800</td>\n",
              "      <td>0.294000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>11.463166</td>\n",
              "      <td>11.467954</td>\n",
              "      <td>46.033729</td>\n",
              "      <td>1.147663</td>\n",
              "      <td>1.747666</td>\n",
              "      <td>0.839869</td>\n",
              "      <td>101.713802</td>\n",
              "      <td>0.294621</td>\n",
              "      <td>0.305809</td>\n",
              "      <td>0.23825</td>\n",
              "      <td>0.490589</td>\n",
              "      <td>0.455637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>23.000000</td>\n",
              "      <td>-3.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>35.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>39.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.700000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>45.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>64.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>55.000000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>98.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>101.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>67.000000</td>\n",
              "      <td>43.000000</td>\n",
              "      <td>224.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>635.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6cdd5754-9fe3-4181-b4a6-36852212593d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6cdd5754-9fe3-4181-b4a6-36852212593d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6cdd5754-9fe3-4181-b4a6-36852212593d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "               Age   Experience  ...       Online   CreditCard\n",
              "count  5000.000000  5000.000000  ...  5000.000000  5000.000000\n",
              "mean     45.338400    20.104600  ...     0.596800     0.294000\n",
              "std      11.463166    11.467954  ...     0.490589     0.455637\n",
              "min      23.000000    -3.000000  ...     0.000000     0.000000\n",
              "25%      35.000000    10.000000  ...     0.000000     0.000000\n",
              "50%      45.000000    20.000000  ...     1.000000     0.000000\n",
              "75%      55.000000    30.000000  ...     1.000000     1.000000\n",
              "max      67.000000    43.000000  ...     1.000000     1.000000\n",
              "\n",
              "[8 rows x 12 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Five point summary suggest that Experience has negative value(This should be fixed)."
      ],
      "metadata": {
        "id": "YfFdYuJMKMmo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "we can see the Min, Max, mean and std deviation for all key attributes of the dataset\n",
        "Income has too much noise and slightly skewed right, Age and exp are equally distributed."
      ],
      "metadata": {
        "id": "7vojBXcvKOsY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "check if there is skewness in data or not!!"
      ],
      "metadata": {
        "id": "4iyvRBkCKRPT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.skew()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mEeeHzLAJw-8",
        "outputId": "8aa3df23-a7aa-4bbb-9963-ba34939b6898"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age                  -0.029341\n",
              "Experience           -0.026325\n",
              "Income                0.841339\n",
              "Family                0.155221\n",
              "CCAvg                 1.598457\n",
              "Education             0.227093\n",
              "Mortgage              2.104002\n",
              "Personal Loan         2.743607\n",
              "Securities Account    2.588268\n",
              "CD Account            3.691714\n",
              "Online               -0.394785\n",
              "CreditCard            0.904589\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lNHsMDVpKTt8",
        "outputId": "8b463e80-e279-4757-cc3e-c122bac8566c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age                     int64\n",
              "Experience              int64\n",
              "Income                  int64\n",
              "Family                  int64\n",
              "CCAvg                 float64\n",
              "Education               int64\n",
              "Mortgage                int64\n",
              "Personal Loan           int64\n",
              "Securities Account      int64\n",
              "CD Account              int64\n",
              "Online                  int64\n",
              "CreditCard              int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "now visualise Skewness by distribution"
      ],
      "metadata": {
        "id": "s59vIz9PKgeX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.hist(figsize=(20,20))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wcaqc_YNKeRg",
        "outputId": "14b2aba7-6ede-4ef8-bf98-512c201859db"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb89d9590>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb8985c90>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb83fd2d0>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb83b48d0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb83e9ed0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb83ad510>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb8362b90>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb8326110>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb8326150>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb82da850>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb899b410>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f2cb82ee810>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x1440 with 12 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "INFERENCE from Histogram"
      ],
      "metadata": {
        "id": "ZzjPylqIKv08"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.Age & Experience are to an extent equally distributed\n",
        "2.Income & Credit card spending are skewed to the left\n",
        "3.We have more Undergraduates than Graduate and Advanced & Professional\n",
        "4.60% of customers have enabled online banking and went digital"
      ],
      "metadata": {
        "id": "QaThKNhcIjrG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "-E8s4jnKKx7e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.distplot(df['Experience'])"
      ],
      "metadata": {
        "id": "j9YRZWqALbJN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Experience'].mean()"
      ],
      "metadata": {
        "id": "1-UmY1xLLc_j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Negative_exp=df[df['Experience']<0]\n",
        "Negative_exp.head()"
      ],
      "metadata": {
        "id": "Dbfz_Z8VLfi7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Negative_exp['Experience'].mean()"
      ],
      "metadata": {
        "id": "zHGSE6rPLoAA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Negative_exp.size"
      ],
      "metadata": {
        "id": "qusuEmFSLv-I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('There are {} records which has negative values for experience, approx {} %'.format(Negative_exp.size , ((Negative_exp.size/df.size)*100)))"
      ],
      "metadata": {
        "id": "vSkabgTgLxeq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data=df.copy()"
      ],
      "metadata": {
        "id": "C9bZTWEhLziu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "id": "6torS6vEL1Yo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "use numpy where function to change the negative values to mean value"
      ],
      "metadata": {
        "id": "oY807vcNMDHy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data['Experience']=np.where(data['Experience']<0,data['Experience'].mean(),data['Experience'])"
      ],
      "metadata": {
        "id": "e5T32rMaMDcR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data[data['Experience']<0]"
      ],
      "metadata": {
        "id": "9fnqXYGnMF2s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "sns.heatmap(df.corr(),annot=True)"
      ],
      "metadata": {
        "id": "4-0P1jDxMHhq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We could see that Age & Experience are very strongly correlated,\n",
        "Hence it is fine for us to go with Age and drop Experience to avoid multi-colinearity issue."
      ],
      "metadata": {
        "id": "Uipsj6FtMQIh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data=data.drop(['Experience'],axis=1)"
      ],
      "metadata": {
        "id": "vulaIK1GMJyE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "id": "LleX1XoKMSMh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Education'].unique()"
      ],
      "metadata": {
        "id": "pDbkxBv9MT6O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def mark(x):\n",
        "    if x==1:\n",
        "        return 'Undergrad'\n",
        "    elif x==2:\n",
        "        return 'Graduate'\n",
        "    else:\n",
        "        return 'Advanced/Professional'"
      ],
      "metadata": {
        "id": "J1eD99AQMWSN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Edu_mark']=data['Education'].apply(mark)"
      ],
      "metadata": {
        "id": "24ZRNZqVMYvy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "id": "xjoZr-7CMg1j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "EDU_dis=data.groupby('Edu_mark')['Age'].count()"
      ],
      "metadata": {
        "id": "7r32sfsRMiNu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig=px.pie(data,values=EDU_dis, names=EDU_dis.index,title='Pie CHart')\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "VN7Sf-2ZMkWK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Inference :We could see that We have more Undergraduates 41.92% than graduates(28.06%) & Advanced Professional(30.02%)"
      ],
      "metadata": {
        "id": "MiEKUCfNM0vG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "id": "t_9ilEmvMqoR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lets Explore the account holder's distribution"
      ],
      "metadata": {
        "id": "-Xo1sFf-M9Rc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Security_CD(row):\n",
        "    if (row['Securities Account']==1) & (row['CD Account']==1):\n",
        "        return 'Holds Securites & Deposit'\n",
        "    elif (row['Securities Account']==0) & (row['CD Account']==0):\n",
        "        return 'Does not Holds Securites or Deposit'\n",
        "    elif (row['Securities Account']==1) & (row['CD Account']==0):\n",
        "        return ' Holds only Securites '\n",
        "    elif (row['Securities Account']==0) & (row['CD Account']==1):\n",
        "        return ' Holds only Deposit'"
      ],
      "metadata": {
        "id": "5fRpdJvyM6d4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Account_holder_category']=data.apply(Security_CD,axis=1)"
      ],
      "metadata": {
        "id": "VwlLEkzGNDFa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "id": "gRnm7fQnNEzf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "values=data['Account_holder_category'].value_counts()"
      ],
      "metadata": {
        "id": "A7A_dGwxNWQa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig=px.pie(data,values=values, names=values.index,title='Pie CHart')\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "CenQG7p3NHTW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We could see that alomst 87% of customers do not hold any securities or deposit, and 3 % hold both securities as well as deposit. It will be good if we encourage those 87% to open any of these account as it will improve the assests of the bank"
      ],
      "metadata": {
        "id": "8r8sOSGJNekw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "px.box(data,x='Edu_mark',y='Income',facet_col='Personal Loan')"
      ],
      "metadata": {
        "id": "5jDR0kbVNaJc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Inference:From the above plot we could say that Income of customers who availed personal loan are alomst same irrescpective of their Education"
      ],
      "metadata": {
        "id": "KqFMnZU2OmRL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "sns.distplot(data[data['Personal Loan']==0]['Income'],hist=False,label='Income With no personal Loan')\n",
        "sns.distplot(data[data['Personal Loan']==1]['Income'],hist=False,label='Income With personal Loan')\n",
        "plt.legend()"
      ],
      "metadata": {
        "id": "SOva3-BhNxjR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Conclusion: Customers Who have availed personal loan seem to have higher income than those who do not have personal loan"
      ],
      "metadata": {
        "id": "zTjYKrSZPb3R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "id": "uEyoz3dbPKPm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "col_names=['Securities Account','Online','Account_holder_category','CreditCard']"
      ],
      "metadata": {
        "id": "MKvCj9BWaeeK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in col_names:\n",
        "    plt.figure(figsize=(10,5))\n",
        "    sns.countplot(x=i,hue='Personal Loan',data=data)"
      ],
      "metadata": {
        "id": "-DQd6uYLaf9O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Perform Hypothesis Testing"
      ],
      "metadata": {
        "id": "OWu8Qmlyaown"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q.. How Age of a person is going to be a factor in availing loan ??? Does Income of a person have an impact on availing loan ??? Does the family size makes them to avail loan ???¶"
      ],
      "metadata": {
        "id": "5CXoOmkrarSc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.stats as stats"
      ],
      "metadata": {
        "id": "vATgvlEQaiQR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Ho='Age does not have impact on availing personal loan'\n",
        "Ha='Age does  have impact on availing personal loan'"
      ],
      "metadata": {
        "id": "9o41x7wjas7h"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Age_no=np.array(data[data['Personal Loan']==0]['Age'])\n",
        "Age_yes=np.array(data[data['Personal Loan']==1]['Age'])"
      ],
      "metadata": {
        "id": "kMJLejl4aunJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "t,p_value=stats.ttest_ind(Age_no,Age_yes,axis=0)\n",
        "if p_value<0.05:\n",
        "    print(Ha,' as the p_value is less than 0.05 with a value of {}'.format(p_value))\n",
        "else:\n",
        "    print(Ho,' as the p_value is greater than 0.05 with a value of {}'.format(p_value))"
      ],
      "metadata": {
        "id": "WA2cMk1bawLo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "automate above stuffs"
      ],
      "metadata": {
        "id": "pzLyPrfna0tu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Hypothesis(col1,col2,HO,Ha):\n",
        "    arr1=np.array(data[data[col1]==0][col2])\n",
        "    arr2=np.array(data[data[col1]==1][col2])\n",
        "    t,p_value=stats.ttest_ind(arr1,arr2,axis=0)\n",
        "    if p_value<0.05:\n",
        "        print('{}, as the p_value is less than 0.05 with a value of {}'.format(Ha,p_value))\n",
        "    else:\n",
        "        print('{} as the p_value is greater than 0.05 with a value of {}'.format(HO,p_value))"
      ],
      "metadata": {
        "id": "b6sNigR7ayIY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Hypothesis('Personal Loan','Age',HO='Age does not have impact on availing personal loan',Ha='Age does  have impact on availing personal loan')"
      ],
      "metadata": {
        "id": "DOjckztWa22k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q..Income of a person has significant impact on availing Personal Loan or not?"
      ],
      "metadata": {
        "id": "JuHQwveWa9_d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Hypothesis(col1='Personal Loan',col2='Income',HO='Income does not have impact on availing personal loan',Ha='Income does  have impact on availing personal loan')"
      ],
      "metadata": {
        "id": "1SHtTYfQa4uT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Income have phenomenal significance on availing personal Loan , As the P_value is less than 0.05 with a value of :0.0"
      ],
      "metadata": {
        "id": "dhQHwpuTbFj7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q..Number of persons in the family has significant impact on availing Personal Loan or not?"
      ],
      "metadata": {
        "id": "ijQUFTRbbLqV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Hypothesis('Personal Loan','Family',HO='AgFamily does not have impact on availing personal loan',Ha='Family does  have impact on availing personal loan')"
      ],
      "metadata": {
        "id": "zAuVjgulbAcY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Family have phenomenal significance on availing personal Loan , As the P_value is less than 0.05 with a value of :1.4099040685673807e-05"
      ],
      "metadata": {
        "id": "HdxqcaIQbRaA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "bU4AtDCRbPhq"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}